// <auto-generated />
using System;
using InfoSymbolServer.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InfoSymbolServer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250421080005_RemoveSymbolShouldSynchronize")]
    partial class RemoveSymbolShouldSynchronize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Exchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_exchanges");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_exchanges_name");

                    b.ToTable("exchanges", (string)null);
                });

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid")
                        .HasColumnName("symbol_id");

                    b.Property<string>("SymbolStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol_status");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.HasIndex("SymbolId")
                        .HasDatabaseName("ix_statuses_symbol_id");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Symbol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("base_asset");

                    b.Property<string>("ContractType")
                        .HasColumnType("text")
                        .HasColumnName("contract_type");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uuid")
                        .HasColumnName("exchange_id");

                    b.Property<string>("MarginAsset")
                        .HasColumnType("text")
                        .HasColumnName("margin_asset");

                    b.Property<string>("MarketType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("market_type");

                    b.Property<decimal>("MaxQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("max_quantity");

                    b.Property<decimal>("MinNotional")
                        .HasColumnType("numeric")
                        .HasColumnName("min_notional");

                    b.Property<decimal>("MinQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("min_quantity");

                    b.Property<int>("PricePrecision")
                        .HasColumnType("integer")
                        .HasColumnName("price_precision");

                    b.Property<int>("QuantityPrecision")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_precision");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quote_asset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("SymbolName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_symbols");

                    b.HasIndex("ExchangeId", "SymbolName", "MarketType")
                        .IsUnique()
                        .HasDatabaseName("ix_symbols_exchange_id_symbol_name_market_type");

                    b.ToTable("symbols", (string)null);
                });

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Status", b =>
                {
                    b.HasOne("InfoSymbolServer.Domain.Models.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_statuses_symbols_symbol_id");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Symbol", b =>
                {
                    b.HasOne("InfoSymbolServer.Domain.Models.Exchange", "Exchange")
                        .WithMany("Symbols")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_symbols_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Exchange", b =>
                {
                    b.Navigation("Symbols");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using System.Collections.Generic;
using InfoSymbolServer.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InfoSymbolServer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250408170133_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Exchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsFutures")
                        .HasColumnType("boolean")
                        .HasColumnName("is_futures");

                    b.Property<bool>("IsOptions")
                        .HasColumnType("boolean")
                        .HasColumnName("is_options");

                    b.Property<bool>("IsSpot")
                        .HasColumnType("boolean")
                        .HasColumnName("is_spot");

                    b.Property<decimal?>("MinTradeSize")
                        .HasColumnType("numeric")
                        .HasColumnName("min_trade_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.PrimitiveCollection<List<string>>("OrderTypes")
                        .IsRequired()
                        .HasColumnType("TEXT[]")
                        .HasColumnName("order_types");

                    b.HasKey("Id")
                        .HasName("pk_exchanges");

                    b.ToTable("exchanges", (string)null);
                });

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Symbol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Board")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("board");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_time");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uuid")
                        .HasColumnName("exchange_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<decimal?>("FundingRate")
                        .HasColumnType("numeric")
                        .HasColumnName("funding_rate");

                    b.Property<bool>("IsMargin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_margin");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("MatchSymbol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("match_symbol");

                    b.Property<decimal?>("MaxLeverage")
                        .HasColumnType("numeric")
                        .HasColumnName("max_leverage");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("max_price");

                    b.Property<decimal?>("MaxSize")
                        .HasColumnType("numeric")
                        .HasColumnName("max_size");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("min_price");

                    b.Property<decimal?>("MinSize")
                        .HasColumnType("numeric")
                        .HasColumnName("min_size");

                    b.Property<DateTime?>("OpenTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_time");

                    b.Property<string>("Pair")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pair");

                    b.Property<decimal?>("PriceStep")
                        .HasColumnType("numeric")
                        .HasColumnName("price_step");

                    b.Property<bool?>("ShouldSyncronize")
                        .HasColumnType("boolean")
                        .HasColumnName("should_syncronize");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("SymbolType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("symbol_type");

                    b.Property<DateTime?>("TradeStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trade_start");

                    b.HasKey("Id")
                        .HasName("pk_symbols");

                    b.HasIndex("ExchangeId", "Pair")
                        .HasDatabaseName("ix_symbols_exchange_id_pair");

                    b.ToTable("symbols", (string)null);
                });

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Symbol", b =>
                {
                    b.HasOne("InfoSymbolServer.Domain.Models.Exchange", "Exchange")
                        .WithMany("Symbols")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_symbols_exchanges_exchange_id");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("InfoSymbolServer.Domain.Models.Exchange", b =>
                {
                    b.Navigation("Symbols");
                });
#pragma warning restore 612, 618
        }
    }
}
